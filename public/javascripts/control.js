// Generated by CoffeeScript 1.4.0
(function() {
  var Display, DisplayRowView, eventManager;

  Display = Backbone.Model.extend({
    initialize: function(id, options) {
      this.socket = options.socket;
      return this.bind("change", function(model) {
        console.log("change");
        console.log(model.toJSON());
        return this.socket.emit("controlShowDisplay", model.toJSON());
      });
    }
  });

  DisplayRowView = Backbone.View.extend({
    initialize: function() {
      return this.render();
    },
    templateRow: "<tr><td>{{timestamp}}</td><td><input class='message' type='text' value='{{message}}'/></td></tr>",
    render: function() {
      var row;
      row = $(_.template(this.templateRow, this.model.toJSON()));
      row.find(".message").on("change", _.bind(this.updateMessageModel, this));
      this.$el.append(row);
      return this;
    },
    updateMessageModel: function(e) {
      var value;
      value = $(e.target).val();
      return this.model.set({
        'message': value
      });
    }
  });

  eventManager = {
    linkDisplayInputToModel: function(model, input) {
      return $(input).change(function(e) {
        var value;
        value = $(e.target).val();
        return model.set({
          'message': value
        });
      });
    }
  };

  $(document).ready(function() {
    var app, _log, _s_log;
    _.templateSettings = {
      interpolate: /\{\{(.+?)\}\}/g
    };
    app = {};
    app.server = io.connect("/");
    console.log("Loading");
    _log = function(message) {
      return console.log(message);
    };
    _s_log = function(o) {
      return console.log(JSON.stringify(o));
    };
    app.showDisplay = function(message) {
      var displayRow,
        _this = this;
      _log(message);
      $("table#displayList").empty();
      displayRow = "<tr><td>{{timestamp}}</td><td><input class='message' type='text' value='{{message}}'/></td></tr>";
      return $.each(message, function(key, display) {
        var input, model, row;
        row = $(_.template(displayRow, display));
        input = row.find(".message");
        _log(input);
        model = new Display(display, {
          socket: app.server
        });
        return new DisplayRowView({
          model: model,
          el: $("table#displayList")
        });
      });
    };
    app.server.on("connect", function() {
      return _log("Connected to the server" + arguments);
    });
    app.server.emit("controlRegister");
    app.server.on("showDisplayList", app.showDisplay);
    app.server.on("message", function(data) {
      return _log("Received message: " + data.message);
    });
    return window.app = app;
  });

}).call(this);
